version: '3.6'
name: archetype
services:
  mongodb:
    image: mongo
    container_name: mongodb
    restart: always
    ports:
      - 127.0.0.1:27017:27017
    command: mongod --noauth
    volumes:
      - mongodb-data:/data/db
      - ./docker/data/mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    environment:
      - MONGO_INITDB_DATABASE=holobank
    mem_limit: 500m
  # react:
  #   image: react-app
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.react
  #   ports:
  #   - "3000:3000"
  #   environment:
  #     REACT_APP_HASURA_API_URL: api.holobank.app/v1/graphql
  #     REACT_APP_REST_API_URL: api.holobank.app/api/rest
  #     REACT_APP_HASURA_API_ADMIN_SECRET: myadminsecretkey
  #     REACT_APP_JWT_ENDPOINT: https://api.holobank.app/jwt
  loki:
    image: grafana/loki:latest
    volumes:
      - loki-data:/loki
      - ./docker/data/loki/loki-config.yaml:/etc/loki/local-config.yaml
  promtail:
    image: grafana/promtail:latest
    volumes:
      - /var/lib/docker/:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./docker/data/promtail/promtail-config.yml:/etc/promtail/config.yml
    depends_on:
      - loki
  otel-collector:
    image: otel/opentelemetry-collector
    command: [ --config=/etc/otel-collector-config.yaml ]
    volumes:
      - ./docker/data/otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - 1888:1888 # pprof extension
      - 8888:8888 # Prometheus metrics exposed by the collector
      - 8889:8889 # Prometheus exporter metrics
      - 13133:13133 # health_check extension
      - 4315:4317 # OTLP gRPC receiver
      - 4316:4318 # OTLP http receiver
      - 55679:55679 # zpages extension
    healthcheck:
      test: wget -qO- http://localhost:13133 || exit 1
      interval: 5s
      timeout: 5s
      retries: 5
  jaeger:
    image: jaegertracing/all-in-one:1.37
    restart: always
    ports:
      - "127.0.0.1:16686:16686" # UI
    environment:
      COLLECTOR_OTLP_ENABLED: 'true'
      COLLECTOR_ZIPKIN_HOST_PORT: '9411'
    healthcheck:
      test: wget -qO- http://localhost:14269 || exit 1
      interval: 5s
      timeout: 5s
      retries: 5
  grafana:
    image: grafana/grafana:latest
    ports:
      - "127.0.0.1:3300:3000"
    environment:
      #- GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/data/grafana/dashboards:/var/lib/grafana/dashboards/
      - ./docker/data/grafana/provisioning:/etc/grafana/provisioning/
    depends_on:
      - prometheus
      - jaeger
    healthcheck:
      test: bash -c ':> /dev/tcp/0.0.0.0/3000' || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
  prometheus:
    image: prom/prometheus:v2.30.0
    volumes:
      - ./docker/data/prometheus:/etc/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "127.0.0.1:9090:9090"
    healthcheck:
      test: wget -qO- http://localhost:9090/-/healthy || exit 1
      interval: 5s
      timeout: 5s
      retries: 5
  creditcheck-api:
    image: node-api1
    build:
      context: docker/data/node/holobank-creditcheck
      dockerfile: docker/Dockerfile.node
    healthcheck:
      test: bash -c ':> /dev/tcp/0.0.0.0/4004' || exit 1
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "127.0.0.1:4004:4004"
  employmentverification-api:
    image: node-api2
    build:
      context: docker/data/node/holobank-employmentverification
      dockerfile: docker/Dockerfile.node
    healthcheck:
      test: bash -c ':> /dev/tcp/0.0.0.0/4005' || exit 1
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "127.0.0.1:4005:4005"
  homeloans-api:
    image: node-api3
    build:
      context: docker/data/node/holobank-homeloans
      dockerfile: docker/Dockerfile.node
    healthcheck:
      test: bash -c ':> /dev/tcp/0.0.0.0/4006' || exit 1
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "127.0.0.1:4006:4006"
  nginx:
    image: nginx-njs
    build:
      context: .
      dockerfile: Dockerfile.nginx
    volumes:
      - ./docker/data/nginx/config/templates:/etc/nginx/templates
      - ./docker/data/nginx/config/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/data/nginx/scripts:/etc/nginx/njs
    ports:
      - "8181:80"
      - "4443:443"
    environment:
      JWT_GEN_KEY: hasura-hs384-secret-vbD*K2y!HXr7@zJ9oLmEJpNtWc.gwQY
      HASURA_ADMIN_KEY: "${HASURA_ADMIN_KEY}"
      REACT_APP_HASURA_API_URL: localhost:8181/v1/graphql
      REACT_APP_REST_API_URL: localhost:8181/api/rest
      REACT_APP_HASURA_API_ADMIN_SECRET: "${HASURA_ADMIN_KEY}"
      REACT_APP_JWT_ENDPOINT: http://localhost:8181/jwt
    depends_on:
      - hasura-main
      - hasura-remote
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 30
  postgres-main:
    image: postgres
    restart: always
    volumes:
      - archetype_postgres_main:/var/lib/postgresql/data
      - ./docker/data/postgres-main/scripts/:/docker-entrypoint-initdb.d/
    environment:
      POSTGRES_PASSWORD: postgrespassword
    ports:
      - "127.0.0.1:5433:5432"
    healthcheck:
      test: "pg_isready -q -h postgres"
      interval: 10s
      timeout: 5s
      retries: 30
  postgres-secondary:
    image: postgres
    restart: always
    volumes:
      - archetype_postgres_secondary:/var/lib/postgresql/data
      - ./docker/data/postgres-secondary/scripts/:/docker-entrypoint-initdb.d/
    environment:
      POSTGRES_PASSWORD: postgrespassword
    ports:
      - "127.0.0.1:5434:5432"
    healthcheck:
      test: "pg_isready -q -h postgres"
      interval: 10s
      timeout: 5s
      retries: 30
  redis:
    image: redis
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
  hasura-main:
    image: hasura/graphql-engine:v2.28.0
    depends_on:
      - jaeger
      - postgres-main
      - postgres-secondary
      - redis
      - data-connector-agent
      - grafana
      - prometheus
      - hasura-remote
      - mongodb
    ports:
      - "127.0.0.1:8111:8080"
    restart: always
    environment:
      HASURA_GRAPHQL_EE_LICENSE_KEY: ${HASURA_GRAPHQL_EE_LICENSE_KEY}
      HASURA_GRAPHQL_ADMIN_SECRETS: |
       [
        "${HASURA_ADMIN_KEY}",
        "4cd563b1b03b25411b02a527f949710d"
        ]
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres-main:5432/hasura_metadata_main
      HASURA_GRAPHQL_DB_URL_FROM_ENV: postgres://postgres:postgrespassword@postgres-main:5432/postgres
      HASURA_GRAPHQL_DB_URL_FROM_ENV_SECONDARY: postgres://postgres:postgrespassword@postgres-secondary:5432/postgres
      HASURA_GRAPHQL_MIGRATIONS_SERVER_TIMEOUT: 30
      HASURA_GRAPHQL_REDIS_URL: redis://redis:6379
      HASURA_GRAPHQL_JWT_SECRETS: |
        [
          {
            "key": "hasura-hs384-secret-vbD*K2y!HXr7@zJ9oLmEJpNtWc.gwQY",
            "type": "HS384",
            "issuer": "keybase-customer"
          },
          {
            "key": "hasura-hs384-secret-vbD*K2y!HXr7@zJ9oLmEJpNtWc.gwQP",
            "type": "HS384",
            "issuer": "keybase-internal"
          }
        ]
      HASURA_GRAPHQL_ENABLE_REMOTE_SCHEMA_PERMISSIONS: true
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: anonymous
      HASURA_GRAPHQL_ENABLE_CONSOLE: true
      HASURA_GRAPHQL_DEV_MODE: true
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_EXPERIMENTAL_FEATURES: streaming_subscriptions
      HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets
      HASURA_GRAPHQL_METADATA_DEFAULTS: '{"backend_configs":{"dataconnector":{"snowflake":{"uri":"http://data-connector-agent:8081/api/v1/snowflake"},"oracle":{"uri":"http://data-connector-agent:8081/api/v1/oracle"},"mysqlgdc":{"uri":"http://data-connector-agent:8081/api/v1/mysql"},"athena":{"uri":"http://data-connector-agent:8081/api/v1/athena"}}}}'
      HASURA_GRAPHQL_ENABLED_APIS: metadata,graphql,config,metrics
      HASURA_GRAPHQL_METRICS_SECRET: "${HASURA_ADMIN_KEY}"
      HASURA_FF_NATIVE_QUERY_INTERFACE: 'True'
    healthcheck:
      test: bash -c ':> /dev/tcp/0.0.0.0/8080' || exit 1
      interval: 5s
      timeout: 5s
      retries: 5
  hasura-remote:
    image: hasura/graphql-engine:v2.28.0
    depends_on:
      - postgres-secondary
      - jaeger
      - redis
      - data-connector-agent
      - grafana
      - prometheus
    ports:
      - "127.0.0.1:8112:8080"
    restart: always
    environment:
      HASURA_GRAPHQL_EE_LICENSE_KEY: ${HASURA_GRAPHQL_EE_LICENSE_KEY}
      HASURA_GRAPHQL_ADMIN_SECRET: "${HASURA_ADMIN_KEY}"
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres-secondary:5432/hasura_metadata_main
      HASURA_SNOWFLAKE_JDBC: jdbc:snowflake://kf55414.ap-southeast-2.snowflakecomputing.com/?user=adammalone&password=Juvenile-perceive-silencer1&db=BANK_DB&schema=PUBLIC&warehouse=COMPUTE_WH&role=ACCOUNTADMIN&CLIENT_SESSION_KEEP_ALIVE=TRUE
      HASURA_GRAPHQL_MIGRATIONS_SERVER_TIMEOUT: 30
      HASURA_GRAPHQL_REDIS_URL: redis://redis:6379
      HASURA_GRAPHQL_JWT_SECRET: |
        {
          "key": "hasura-hs384-secret-vbD*K2y!HXr7@zJ9oLmEJpNtWc.gwQY",
          "type": "HS384"
        }
      HASURA_GRAPHQL_ENABLE_REMOTE_SCHEMA_PERMISSIONS: true
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: anonymous
      HASURA_GRAPHQL_ENABLE_CONSOLE: true
      HASURA_GRAPHQL_DEV_MODE: true
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_EXPERIMENTAL_FEATURES: streaming_subscriptions
      HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets
      HASURA_GRAPHQL_METADATA_DEFAULTS: '{"backend_configs":{"dataconnector":{"snowflake":{"uri":"http://data-connector-agent:8081/api/v1/snowflake"},"oracle":{"uri":"http://data-connector-agent:8081/api/v1/oracle"},"mysqlgdc":{"uri":"http://data-connector-agent:8081/api/v1/mysql"},"athena":{"uri":"http://data-connector-agent:8081/api/v1/athena"}}}}'
      HASURA_GRAPHQL_ENABLED_APIS: metadata,graphql,config,metrics
      HASURA_GRAPHQL_METRICS_SECRET: "${HASURA_ADMIN_KEY}"
    healthcheck:
      test: bash -c ':> /dev/tcp/0.0.0.0/8080' || exit 1
      interval: 5s
      timeout: 5s
      retries: 5
  data-connector-agent:
    image: hasura/graphql-data-connector:v2.24.0
    restart: always
    ports:
      - 8081:8081
    environment:
      QUARKUS_LOG_LEVEL: ERROR # FATAL, ERROR, WARN, INFO, DEBUG, TRACE
      ## https://quarkus.io/guides/opentelemetry#configuration-reference
      QUARKUS_OPENTELEMETRY_ENABLED: 'false'
      QUARKUS_OPENTELEMETRY_TRACER_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:8081/api/v1/snowflake/health"
        ]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 5s
  mongo-data-connector:
    image: hasura/mongo-data-connector:v2.28.0
    ports:
      - 3000:3000
volumes:
  loki-data:
  grafana-data:
  prometheus:
  archetype_postgres_main:
  archetype_postgres_secondary:
  mongodb-data:
